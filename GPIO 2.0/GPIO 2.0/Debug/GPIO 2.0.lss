
GPIO 2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000880  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000687  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cd  00000000  00000000  000011b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000242  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001c4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  64:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <direction_pin>:
void port_direction (uint8_t port , uint8_t state)  //set first 4 pins in port to zeros or ones
{
	if (state == input)
	(*(volatile uint8_t*)(port+1)) = 0xF0;     //set first 4 pins in port X to input
	if (state == output)
	(*(volatile uint8_t*)(port+1)) = 0x0F;     //set first 4 pins in port X to output
  6c:	61 30       	cpi	r22, 0x01	; 1
  6e:	69 f4       	brne	.+26     	; 0x8a <direction_pin+0x1e>
  70:	e8 2f       	mov	r30, r24
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	21 81       	ldd	r18, Z+1	; 0x01
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	02 c0       	rjmp	.+4      	; 0x80 <direction_pin+0x14>
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	4a 95       	dec	r20
  82:	e2 f7       	brpl	.-8      	; 0x7c <direction_pin+0x10>
  84:	82 2b       	or	r24, r18
  86:	81 83       	std	Z+1, r24	; 0x01
  88:	08 95       	ret
  8a:	e8 2f       	mov	r30, r24
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	21 81       	ldd	r18, Z+1	; 0x01
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <direction_pin+0x2e>
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	4a 95       	dec	r20
  9c:	e2 f7       	brpl	.-8      	; 0x96 <direction_pin+0x2a>
  9e:	80 95       	com	r24
  a0:	82 23       	and	r24, r18
  a2:	81 83       	std	Z+1, r24	; 0x01
  a4:	08 95       	ret

000000a6 <pin_write>:



void pin_write (uint8_t port,uint8_t value, uint8_t pin )
{
	if(value==0)
  a6:	61 11       	cpse	r22, r1
  a8:	0e c0       	rjmp	.+28     	; 0xc6 <pin_write+0x20>
	(*(volatile uint8_t*)(port+2)) &= ~(1<<pin);
  aa:	e8 2f       	mov	r30, r24
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	22 81       	ldd	r18, Z+2	; 0x02
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <pin_write+0x14>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	4a 95       	dec	r20
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <pin_write+0x10>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	82 83       	std	Z+2, r24	; 0x02
  c4:	08 95       	ret
	else
	(*(volatile uint8_t*)(port+2)) |= (1<<pin);
  c6:	e8 2f       	mov	r30, r24
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	22 81       	ldd	r18, Z+2	; 0x02
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <pin_write+0x30>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	4a 95       	dec	r20
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <pin_write+0x2c>
  da:	82 2b       	or	r24, r18
  dc:	82 83       	std	Z+2, r24	; 0x02
  de:	08 95       	ret

000000e0 <main>:
#include "IncFile1.h"

int main(void)
{

	mySREG|=1<<7;
  e0:	8f b7       	in	r24, 0x3f	; 63
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	8f bf       	out	0x3f, r24	; 63
	myGICR|=1<<6;
  e6:	8b b7       	in	r24, 0x3b	; 59
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	8b bf       	out	0x3b, r24	; 59
	myMCUCR = 0X01;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	85 bf       	out	0x35, r24	; 53
	direction_pin(A,output,1);
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	89 e3       	ldi	r24, 0x39	; 57
  f6:	0e 94 36 00 	call	0x6c	; 0x6c <direction_pin>
	direction_pin(D,input,2);
  fa:	42 e0       	ldi	r20, 0x02	; 2
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	80 e3       	ldi	r24, 0x30	; 48
 100:	0e 94 36 00 	call	0x6c	; 0x6c <direction_pin>
	//pin_write(A,high,1);
	while (1){
		pin_write(A,high,1);
 104:	41 e0       	ldi	r20, 0x01	; 1
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	89 e3       	ldi	r24, 0x39	; 57
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <pin_write>
 10e:	fa cf       	rjmp	.-12     	; 0x104 <main+0x24>

00000110 <__vector_1>:
	}
}
ISR(__vector_1){
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
    pin_write(A,low,1);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	89 e3       	ldi	r24, 0x39	; 57
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <pin_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	2f e7       	ldi	r18, 0x7F	; 127
 13e:	8a e1       	ldi	r24, 0x1A	; 26
 140:	96 e0       	ldi	r25, 0x06	; 6
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <__vector_1+0x32>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <__vector_1+0x3c>
 14c:	00 00       	nop
	_delay_ms(2000);
	myGIFR|=1<<6;
 14e:	8a b7       	in	r24, 0x3a	; 58
 150:	80 64       	ori	r24, 0x40	; 64
 152:	8a bf       	out	0x3a, r24	; 58
}
 154:	ff 91       	pop	r31
 156:	ef 91       	pop	r30
 158:	bf 91       	pop	r27
 15a:	af 91       	pop	r26
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	7f 91       	pop	r23
 162:	6f 91       	pop	r22
 164:	5f 91       	pop	r21
 166:	4f 91       	pop	r20
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
