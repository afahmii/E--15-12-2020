
SPI Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000101e  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000889  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b3  00000000  00000000  00001b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00002338  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000503  00000000  00000000  000024cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d2  00000000  00000000  000029cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  000031a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_commands>:
	lcd_commands(0x01);      // shift cursor right
	
}
void lcd_commands(uint8_t command)
{
	(*(volatile uint8_t*)(lcd_data+2))=command; 
  6c:	85 bb       	out	0x15, r24	; 21


void pin_write (uint8_t port,uint8_t value, uint8_t pin )
{
	if(value==0)
	(*(volatile uint8_t*)(port+2)) &= ~(1<<pin);
  6e:	c1 98       	cbi	0x18, 1	; 24
  70:	c2 98       	cbi	0x18, 2	; 24
	else
	(*(volatile uint8_t*)(port+2)) |= (1<<pin);
  72:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	00 00       	nop


void pin_write (uint8_t port,uint8_t value, uint8_t pin )
{
	if(value==0)
	(*(volatile uint8_t*)(port+2)) &= ~(1<<pin);
  76:	c3 98       	cbi	0x18, 3	; 24
  78:	81 e2       	ldi	r24, 0x21	; 33
  7a:	8a 95       	dec	r24
  7c:	f1 f7       	brne	.-4      	; 0x7a <lcd_commands+0xe>
  7e:	00 00       	nop
  80:	08 95       	ret

00000082 <lcd_init>:
}
 
 
void lcd_init()
{
	(*(volatile uint8_t*)(lcd_data+1))=0xff;   // set data port to output
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
//	(*(volatile uint8_t*)(lcd_data+2))=0x00;    // set initial value to 0
	(*(volatile uint8_t*)(lcd_comms+1))=0xff;   // set commands ports to output
  86:	87 bb       	out	0x17, r24	; 23


void pin_write (uint8_t port,uint8_t value, uint8_t pin )
{
	if(value==0)
	(*(volatile uint8_t*)(port+2)) &= ~(1<<pin);
  88:	c3 98       	cbi	0x18, 3	; 24
  8a:	83 ef       	ldi	r24, 0xF3	; 243
  8c:	91 e0       	ldi	r25, 0x01	; 1
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_init+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcd_init+0x12>
  94:	00 00       	nop
  96:	c1 98       	cbi	0x18, 1	; 24
  98:	c2 98       	cbi	0x18, 2	; 24
//	(*(volatile uint8_t*)(lcd_comms+2))=0x00;   // set initial value to 0
	pin_write(lcd_comms,low,E);
	_delay_us(2000);
	pin_write(lcd_comms,low,RS);
	pin_write(lcd_comms,low,RW);
	lcd_commands(0x38);
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_commands>
	lcd_commands(0x0E);
  a0:	8e e0       	ldi	r24, 0x0E	; 14
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_commands>
	lcd_commands(0x01);
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_commands>
  ac:	83 ef       	ldi	r24, 0xF3	; 243
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_init+0x2e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_init+0x34>
  b6:	00 00       	nop
	_delay_us(2000);
	lcd_commands(0x01);      // shift cursor right
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_commands>
  be:	08 95       	ret

000000c0 <lcd_dataout>:
	_delay_us(100);
	
}
void lcd_dataout(uint8_t data)
{
	(*(volatile uint8_t*)(lcd_data+2))=data;
  c0:	85 bb       	out	0x15, r24	; 21
void pin_write (uint8_t port,uint8_t value, uint8_t pin )
{
	if(value==0)
	(*(volatile uint8_t*)(port+2)) &= ~(1<<pin);
	else
	(*(volatile uint8_t*)(port+2)) |= (1<<pin);
  c2:	c1 9a       	sbi	0x18, 1	; 24


void pin_write (uint8_t port,uint8_t value, uint8_t pin )
{
	if(value==0)
	(*(volatile uint8_t*)(port+2)) &= ~(1<<pin);
  c4:	c2 98       	cbi	0x18, 2	; 24
	else
	(*(volatile uint8_t*)(port+2)) |= (1<<pin);
  c6:	c3 9a       	sbi	0x18, 3	; 24
  c8:	00 00       	nop


void pin_write (uint8_t port,uint8_t value, uint8_t pin )
{
	if(value==0)
	(*(volatile uint8_t*)(port+2)) &= ~(1<<pin);
  ca:	c3 98       	cbi	0x18, 3	; 24
  cc:	81 e2       	ldi	r24, 0x21	; 33
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_dataout+0xe>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <main>:
#define F_CPU 1000000UL
int main(void)
{
    /* Replace with your application code */
//	Clock_rate(F_128);
	spi_init(MASTER);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 88 00 	call	0x110	; 0x110 <spi_init>
	
		lcd_init();
  dc:	0e 94 41 00 	call	0x82	; 0x82 <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	83 ec       	ldi	r24, 0xC3	; 195
  e2:	99 e0       	ldi	r25, 0x09	; 9
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0xe>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x14>
  ea:	00 00       	nop
		_delay_ms(10);
//	uint8 data=0;
    while (1) 
    {  for(uint8 i ='A';i<=255;i++)
  ec:	c1 e4       	ldi	r28, 0x41	; 65
  ee:	9f e3       	ldi	r25, 0x3F	; 63
  f0:	2d e0       	ldi	r18, 0x0D	; 13
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	91 50       	subi	r25, 0x01	; 1
  f6:	20 40       	sbci	r18, 0x00	; 0
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x1e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x28>
  fe:	00 00       	nop
		{  _delay_ms(1000);
		   master_transmit(i);
 100:	8c 2f       	mov	r24, r28
 102:	0e 94 9a 00 	call	0x134	; 0x134 <master_transmit>
	   lcd_dataout(i);
 106:	8c 2f       	mov	r24, r28
 108:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_dataout>
	
		lcd_init();
		_delay_ms(10);
//	uint8 data=0;
    while (1) 
    {  for(uint8 i ='A';i<=255;i++)
 10c:	cf 5f       	subi	r28, 0xFF	; 255
 10e:	ef cf       	rjmp	.-34     	; 0xee <main+0x18>

00000110 <spi_init>:
	{   
		mySPCR |= (1<<SPIE);
	}
	else if(interrupt1 == 0 )
	{
		mySPCR &= ~(1<<SPIE);
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	41 f4       	brne	.+16     	; 0x124 <spi_init+0x14>
 114:	87 b3       	in	r24, 0x17	; 23
 116:	80 6b       	ori	r24, 0xB0	; 176
 118:	87 bb       	out	0x17, r24	; 23
 11a:	be 98       	cbi	0x17, 6	; 23
 11c:	8d b1       	in	r24, 0x0d	; 13
 11e:	80 65       	ori	r24, 0x50	; 80
 120:	8d b9       	out	0x0d, r24	; 13
 122:	08 95       	ret
 124:	81 11       	cpse	r24, r1
 126:	05 c0       	rjmp	.+10     	; 0x132 <spi_init+0x22>
 128:	be 9a       	sbi	0x17, 6	; 23
 12a:	87 b3       	in	r24, 0x17	; 23
 12c:	8f 74       	andi	r24, 0x4F	; 79
 12e:	87 bb       	out	0x17, r24	; 23
 130:	6e 9a       	sbi	0x0d, 6	; 13
 132:	08 95       	ret

00000134 <master_transmit>:
	}
}
uint8 master_transmit(uint8 data)
{
	mySPDR = data; 
 134:	8f b9       	out	0x0f, r24	; 15
	while (!(mySPSR &(1<<SPIF)));
 136:	77 9b       	sbis	0x0e, 7	; 14
 138:	fe cf       	rjmp	.-4      	; 0x136 <master_transmit+0x2>
	return mySPDR;
 13a:	8f b1       	in	r24, 0x0f	; 15
}
 13c:	08 95       	ret

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
